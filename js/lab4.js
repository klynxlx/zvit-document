function showDetails4() {
    var outputDiv = document.getElementById("output");
    outputDiv.innerHTML = `
<p><strong>Тема:</strong>  АДАПТИВНА ВЕРСТКА. МЕДІА-ЗАПИТИ. МЕТАТЕГ VIEWPORT. СТРАТЕГІЯ MOBILE FIRST.</p>
<p><strong>Мета:</strong> Адаптивна верстка. Медіа-запити. Медіа-типи. Медіа-функції.Метатег viewport. Інструменти розробника. Стратегія Mobile First. </p>
<p><strong>Місце розташування:</strong></p>
<ul>
    <li>Посилання на репозиторій лабораторної роботи №4: 
        <a href="https://github.com/klynxlx/linnyk_lab2">https://github.com/klynxlx/linnyk_lab2</a>
    </li>
    <li>Посилання на живу сторінку лабораторної роботи №4: 
        <a href="https://klynxlx.github.io/linnyk_lab2/">https://klynxlx.github.io/linnyk_lab2/</a>
    </li>
    <li>Посилання на репозиторій звітного HTML документу: 
        <a href="https://github.com/klynxlx/zvit-document">https://github.com/klynxlx/zvit-document</a>
    </li>
    <li>Посилання на живу сторінку звітного HTML документу: 
        <a href="https://klynxlx.github.io/zvit-document/">https://klynxlx.github.io/zvit-document/</a>
    </li>
</ul>`

;
}

function DesktopScreen() {
    var outputDiv = document.getElementById("output");
    outputDiv.innerHTML = `
            <img src="./images/Desktop.jpg" alt="Placeholder Image" width="700">`
        ;
    }
    function TabletScreen() {
        var outputDiv = document.getElementById("output");
        outputDiv.innerHTML = `
                <img src="./images/Tablet.jpg" alt="Placeholder Image" width="700">`
            ;
        }
        function MobileScreen() {
            var outputDiv = document.getElementById("output");
            outputDiv.innerHTML = `
                    <img src="./images/Mobile.jpg" alt="Placeholder Image" width="700">`
                ;
            }    

            function showConclusion4() {
                var outputDiv = document.getElementById("output");
                var conclusion = `
                    <p><strong>Висновок:</strong>Адаптивна верстка дозволяє веб-сторінці коректно відображатися на різних пристроях: від великих моніторів (десктопів) до планшетів і мобільних телефонів. Це досягається за допомогою медіа-запитів у CSS, які дозволяють змінювати стиль сторінки в залежності від розміру екрана. </p>
                    <p> <b>Десктопна версія </b></p>
                <ul>
              <li> Мета: Зробити дизайн максимально широким і зручним для великих екранів (від 1200 пікселів і більше).</li>
                <li> Ширина елементів: Сітка для розміщення контенту має більше колонок (наприклад, 4-6 колонок), що дозволяє використовувати більше екранного простору. У нашому прикладі .grid-item займає 14% від ширини контейнера.
Розмір шрифту: Шрифти та інші елементи мають стандартний розмір, щоб бути легко читабельними на великому екрані.
Максимальне використання простору: Більший екран дозволяє показувати більше елементів, тому для великих екранів ми зберігаємо оригінальну верстку без суттєвих змін.</li>

                    <p><b> Планшетна версія</b></p>

              <li>Мета: Забезпечити зручність перегляду на екранах середнього розміру (768px - 1199px).</li>
              <li>Зміна ширини елементів: Контент починає займати більше місця в ширину. Наприклад, ширина елементів .grid-item збільшується до 22%, щоб відповідати обмеженій ширині екрана планшета.
Менший розмір шрифтів і відступів: Щоб забезпечити зручність перегляду, зменшуються розміри шрифтів і відступів для навігації та тексту.
Сітка стає компактнішою: На планшетах може бути зменшена кількість колонок (з 6 до 3-4), щоб адаптувати контент до розмірів екрана.</li>

<p><b> Мобільна версія</b></p>

              <li>Мета: Забезпечити читабельність та зручність перегляду на невеликих екранах мобільних телефонів (до 767 пікселів).</li>
              <li>Вертикальне розташування елементів: Всі елементи .grid-item тепер відображаються один під одним, щоб зберегти простий інтерфейс для маленьких екранів.
Менший розмір шрифтів і зображень: Шрифти, зображення і інші елементи інтерфейсу зменшуються для зручнішого перегляду на малому екрані.
Навігація в стовпчик: У мобільній версії навігаційні посилання відображаються вертикально, щоб було зручно натискати пальцем.
Зміна сітки: На мобільних пристроях сітка з елементами зображень (фільмів, серіалів) переходить на одну колонку, щоб користувач міг легко прокручувати контент.</li>

<p><b> Логічні оператори</b></p>

              <li>У CSS можна використовувати логічні оператори для медіа-запитів, такі як and, or, not, щоб задавати більш складні умови для відображення стилів. Наприклад, можна одночасно перевіряти мінімальну і максимальну ширину екрана</li>
              
              </ul>



                    `
                ;
                outputDiv.innerHTML = conclusion;
            } 